%nsi_bin3D.m
%this is a file used to manipulate binary FF data recorded from the GTU NSI/ Howland Chamber
%the script imports both the CoPol and XPol (dB, post NF=>FF X-form, UNcorrected WRT SGH, as if straight from VNA) 
%amplitudes, for all of the beams measured.  Total Power is computed by taking the power sum of the
%CoPol and Xpol components (must convert them back to linear units, and
%reconvert total power in dB)
%for plotting, both the Azplot.m and Dirpolot.m script files are used (NOT built-in!) 
%the data is generated by running a (heavily) modified version of the Efficiency Calc macro 
%developed by Mike Hill:  MLDump.macro9 in the
%C:/NSI2000/Script/NF/UserDefined directory (local to S. Krupa's laptop)
%this modified version of the "stock" Efficiency Calc script
%contains the proper code modifications for outputting the required data
%as little-endian binary data arrays (in Float32/ Single data precision
%format)
%the data matrices are arranged 62x122 with the 62st and 122st columns filled
%with ZEROS.  Matrix ROWS are PHI cuts (Theta held constant) while COLUMNS
%are THETA cuts (phi held constant).  Theta Point Sampling 0:1:180
%Phi Point Sampling 0:1:360.  First ROW corresponds to THETA=0, First Column
%to PHI=0.

clear all;
close all;
clc;

%fixed variables:
plot_inc=10;  %set radial increments to 3 dB/ div. scale
n_plot_inc=4; %total # of radial divisions on each plot
deg2rad=pi/180;

%Cut 1 = Azimuth Cut (sweeping phi) w/ Theta held at 90 d.

%Load S11 Data (dB magnitudes and Frequencies)

fname_freq='AUT_S11_Freqs.out';
fname_S11dB='AUT_S11_MagdB.out';
fname_freq_Xact=dir(fname_freq);
fname_S11dB_Xact=dir(fname_S11dB);
pathnameP1=eval('cd');

[fidf1,message]=fopen(fname_freq_Xact.name,'r','ieee-le');
[fids1,message]=fopen(fname_S11dB_Xact.name,'r','ieee-le');

freq=fread(fidf1,'float');
S11dBmag=fread(fids1,'float');

 numbeam1=length(freq);  %total # of beams

 
  %eval(['cd ' pathnameP1]);

  FF_nTH=181;
    FF_cTH=ceil(FF_nTH/2);
    FF_dTH=1; %spatial FF sampling interval (grid spacing) across Theta (in degrees)
    FF_nPHI=361;
    FF_cPHI=ceil(FF_nPHI/2);
    FF_dPHI=1; %spatial FF sampling interval (grid spacing) across Phi (in degrees)
    %the above matrix dimensions assume a 1 degree spacing over theta and
   %phi (i.e. theta runs [0:3:177] (number of pts =60) while phi runs from
   %[0:3:357] (number of pts=120)
   %for different NF spatial sampling densities, these numbers will have to
   %be CHANGED
  

for k=1:numbeam1;
fname_ph=['AUT_UncorrFF_dBGain_CoPol' num2str(k) '.out'];
fname_phx=strrep(fname_ph, 'CoPol','XPol');
fname_act=dir(fname_ph);
fnamex_act=dir(fname_phx);
[fidc1,message]=fopen(fname_act.name,'r','ieee-le');
[fidx1,message]=fopen(fnamex_act.name,'r','ieee-le');
[copol_cut1(:,:,k)] = fread(fidc1, [FF_nTH+1, inf], 'float');
[xpol_cut1(:,:,k)] = fread(fidx1, [FF_nTH+1, inf], 'float');
end


CPgain=copol_cut1(1:FF_nTH,1:FF_nPHI,:);
XPgain=xpol_cut1(1:FF_nTH,1:FF_nPHI,:);
Totgain=10*log10( 10.^(CPgain./10) + 10.^(XPgain./10) ) ;

[EffnameP1, EffpathP1] = uigetfile('*EffCal*.csv', 'Pick the SGH Efficiency File for Calibrating AUT data ');

 if isequal(EffnameP1,0)|isequal(EffpathP1,0)
       disp('File not found')
    else
       disp(['File ', EffpathP1,EffnameP1, ' found'])
    end

dBinameP1=strrep(EffnameP1, 'EffCal','dBiCal');


   sinTHvec=sin((0:FF_dTH:FF_dTH*(FF_nTH-1)).*deg2rad ).';
   sinTH_ND=repmat(sinTHvec, [1 FF_nPHI numbeam1]);
   delta_SPsr_ND=sinTH_ND.*(FF_dTH*FF_dPHI*deg2rad*deg2rad);%incremental surface patch areas, in stearadians,
   %over all numbeam1 dimensions (the Sin(theta) variations included in
   %these surface patches
   
   
   delta_SPsr_ND(:,1,:)=0.5*delta_SPsr_ND(:,1,:);
   delta_SPsr_ND(:,FF_nPHI,:)=0.5*delta_SPsr_ND(:,FF_nPHI,:);
   %above 2 lines mimic Mike Hill's script, where he only takes 1/2 of the
   %solid angle area associated with the incremental surface patches
   %falling on the Phi=0 and Phi=360 degree points. 
   
    SavgAUT=sum(sum((10.^(Totgain./10)) .* delta_SPsr_ND));%AVG power density (W/m^2)  computed by integrating
    %the AUT Poynting Vector S_tot(TH,PHI) over 4pi stearadians of solid angle (the whole
    %sphere) ==>The Totgain values are in dB generated by X-forming the NF data to FF values
    %and sampling these FF values over the various (TH,PHI) grid points
    %specified in the MLdump script (i.e. every 3 degrees, TH=0:3:180 and
    %PHI=0:3:360
   
   %Read in Calibration Frequency Points & Total Integrated Power and for the SGH (assuming 100% efficient SGH)
    fidEff=fopen([EffpathP1 EffnameP1], 'r');
    txtline=fgets(fidEff);
    teststr='Power, at theta, at phi,'; 
    
    while (isempty(findstr(teststr,txtline))) %keeps loading lines until teststr is identified
        txtline=fgets(fidEff);
    end
    
   Effdata=fscanf(fidEff, '%g %*c %*g %*c %*g %*c %*g %*c %g %*c %*g %*c %*g %*c %*g', [2, inf]); %loads the NF Amplitude & Phase data 
   %the %*c conversion characters SKIP over the single-character commas separating the
   %numeric values (the files are .csv format)
   Effdata=Effdata.';
   SGH_TIPwrDensity=Effdata(:,2);
   SGH_meas_f=Effdata(:,1);
   
   Effcheck=(reshape(SavgAUT,[numbeam1 1 1])./SGH_TIPwrDensity)*100
   %this computes the terminal efficiencies over all numbeam1 frequencies:
   %crosscheck these values with the terminal efficiencies listed in the
   %Excel spreadsheet summaries to verify correct import and computation of
   %Avg power, etc.
   
   errflag1= ~(isequal(round(SGH_meas_f/(25*10^6)), round(freq/(25*10^6))));%ensure freqs match to nearest 25 MHz
        %errflag1 = 0 % hardwired to assume frequencies match up properly, until the roundoff problem is better understood
%Read in Calibration Frequency Points & Network Gain Offset for the SGH (assuming 100% efficient, perfectly matched SGH)
    fiddBi=fopen([EffpathP1 dBinameP1], 'r');
    txtline=fgets(fiddBi);
    teststr='more details.'; 
    
    while (isempty(findstr(teststr,txtline))) %keeps loading lines until teststr is identified
        txtline=fgets(fiddBi);
    end
    
   dBi_data=fscanf(fiddBi, '%g  %*c %g', [2, inf]); %loads the dBi file freq points and SGH NW offset values (dB) 
   dBi_data=dBi_data.';
   SGH_NWoffset=dBi_data(:,2);
   dBi_meas_f=dBi_data(:,1);
   
   errflag2= ~(isequal(round(dBi_meas_f/(25*10^6)), round(freq/(25*10^6))));%ensure freqs match to nearest 25 MHz
    %errflag2 = 0 % hardwired to assume frequencies match up properly, until the roundoff problem is better understood
   if (errflag1 | errflag2)
       error('ERROR: frequency points for AUT and the Cal Files do NOT match:  EXITING')
   end
   

   maxdBitest=( max( max(Totgain) )) + reshape(SGH_NWoffset, [1,1,numbeam1]);
   maxdBitest=reshape(maxdBitest,[numbeam1 1 1])
   %above verifies that the values pulled in from dBiCal files are the
   %correct Network Offset adjustment values (in dB, measured from SGH Cal standards) 
   %which need to be added to the UNnormalized Gain values (IT WORKS!!!!)
   
   %put SGH_NW offset values into an N-D array format for addition to
   %(uncorrected) CPgain, Xpgain, and totgain values
   NWoffset_ND=repmat(reshape(SGH_NWoffset, [1,1,numbeam1]), [FF_nTH FF_nPHI 1]);
   
   %-----------------------------------------------------------------------
   %PLOTTING SPECIFIC CUTS (typically, Azimuth w/ Theta=90, Elev. w/ Phi=0,
   %& Elev. w/ Phi=90
   
   %Here's where we apply the NW offset to get the correct Terminal Gain
   % corrected into dBi values 
   CPgain=CPgain + NWoffset_ND;
   XPgain=XPgain + NWoffset_ND;
   Totgain=Totgain + NWoffset_ND;
  
   
CPang=(-180:1:180);
leg_ang=fftshift(CPang); %corrects for graphing under Azplot function
leg_ang=repmat(leg_ang, [1 1 numbeam1]);
%The line below sets plot scaling to next 3dB level above global peak gain 
% azcut_rhomax= ceil( max( max( max(Totgain) ) ) ./ plot_inc) .* plot_inc;
%The line below sets Rhomax manually (for all plots)
%azcut_rhomax=3;
azcut_rhomax=20;

%rhoplotmin=azcut_rhomax - n_plot_inc .* plot_inc;
rhoplotmin=-20;
% 
CPgainplot=CPgain .* (CPgain>rhoplotmin) + rhoplotmin*(CPgain <= rhoplotmin);
XPgainplot=XPgain .* (XPgain>rhoplotmin) + rhoplotmin*(XPgain <= rhoplotmin);
Totgainplot=Totgain .* (Totgain>rhoplotmin) + rhoplotmin*(Totgain <= rhoplotmin);
CPgainplot=round(CPgainplot.*100)./100;
XPgainplot=round(XPgainplot.*100)./100;
Totgainplot=round(Totgainplot.*100)./100;

% 
% plot stuff for AzCut
DT1=input('Enter downtilt angle 90-DT (in deg) = ');
Az_Ang_Th=DT1;  % change this for different Azimuth cuts:  will sweep out a "cone", w/ Theta held fixed

Az_Ang_vec=linspace(0,180,FF_nTH);
[Dummy, Az_Ang_indx]=min(abs(Az_Ang_vec-Az_Ang_Th));
[maxCPgain,maxCPindx]=max(CPgainplot(Az_Ang_indx,:,:));
[maxXPgain,maxXPindx]=max(XPgainplot(Az_Ang_indx,:,:));
[maxTotgain,maxTotindx]=max(Totgainplot(Az_Ang_indx,:,:));

% Power Sum Plot------------------------------------------------
% 
lnstyl={'k-' 'b:'  'g-.'  'm--' 'r-' 'c--' 'g:'};
% 
figure(1);
orient landscape;
for i=1:numbeam1
    Azplot(CPang,Totgainplot(Az_Ang_indx,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end
 for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxTotgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxTotindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Azimuth Cut, held at Theta = ' num2str(Az_Ang_Th) '^o: E_{TOTAL} (Power \Sigma) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;
% 
% 
% %CoPol Plot----------------------------------------------------
% 
figure(2);
orient landscape;
for i=1:numbeam1
    Azplot(CPang,CPgainplot(Az_Ang_indx,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end
 for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxCPgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxCPindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Azimuth Cut, held at Theta = ' num2str(Az_Ang_Th) '^o: E_{\theta} (CoPol) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;


% XPol Plot--------------------------------------------
% 
figure(3);
orient landscape;
for i=1:numbeam1
    Azplot(CPang,XPgainplot(Az_Ang_indx,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end
 for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxXPgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxXPindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Azimuth Cut, held at Theta = ' num2str(Az_Ang_Th) '^o: E_{\phi} (XPol) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;


%--------------------------------------------------------------------------
% Phi = 3 Theta Cut (Elevation Cut#1)
%-------------------------------------------------------------------------
DT4=input ('Enter DT angle 0+DT (in degree) = ');
EL_Ang_PHI=DT4;

%here's where we "wrap" the Elevation Cut 360 degrees over Theta
%The Goal:  to have ND Elevation-Cut vectors EL_CP_Gplot, etc. w/ elements (-180:FF_dTH:180)
%We need to re-do EL_Ang_vec, etc. AFTER we've "wrapped" the elevation cuts
%of interest
EL_Ang_vec=linspace(0,180,FF_nTH);
[Dummy, EL_Ang_indx]=min(abs(EL_Ang_vec-EL_Ang_PHI));
% 
 EL_CP_Gplot=[CPgainplot(:,EL_Ang_indx,:) ; flipdim( (CPgainplot(2:end, EL_Ang_indx + (FF_cPHI-1), :)),1)];
 EL_XP_Gplot=[XPgainplot(:,EL_Ang_indx,:) ; flipdim( (XPgainplot(2:end, EL_Ang_indx + (FF_cPHI-1), :)),1)];
 EL_Tot_Gplot=[Totgainplot(:,EL_Ang_indx,:) ; flipdim( (Totgainplot(2:end, EL_Ang_indx + (FF_cPHI-1), :)),1)];
 
 EL_CP_Gplot=fftshift(EL_CP_Gplot,1);
 EL_XP_Gplot=fftshift(EL_XP_Gplot,1);
 EL_Tot_Gplot=fftshift(EL_Tot_Gplot,1);
% 

EL_Ang_vec=linspace(-180,180,2*FF_nTH-1);
[Dummy, EL_Ang_indx]=min(abs(EL_Ang_vec-EL_Ang_PHI));
ELang=(-180:FF_dTH:180);
leg_ang=(ELang); %corrects for graphing under Dirplot function
leg_ang=repmat(leg_ang, [1 1 numbeam1]);

[maxCPgain,maxCPindx]=max(EL_CP_Gplot(:,1,:));
[maxXPgain,maxXPindx]=max(EL_XP_Gplot(:,1,:));
[maxTotgain,maxTotindx]=max(EL_Tot_Gplot(:,1,:));


%plot stuff for Phi=0 Theta Cut (Elevation Cut#1)
%Power Sum Plot
figure(4);
orient landscape;

for i=1:numbeam1
    Dirplot(ELang.',EL_Tot_Gplot(:,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end

for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxTotgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxTotindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Elevation Cut, held at Phi = ' num2str(EL_Ang_PHI) '^o: E_{TOTAL} (Power \Sigma) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;

%CoPol Plot
figure(5);
orient landscape;

for i=1:numbeam1
    Dirplot(ELang.',EL_CP_Gplot(:,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end

for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxCPgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxCPindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Elevation Cut, held at Phi = ' num2str(EL_Ang_PHI) '^o: E_{\theta} (CoPol) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;


% Xpol Plot
figure(6);
orient landscape;

for i=1:numbeam1
    Dirplot(ELang.',EL_XP_Gplot(:,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end

for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxXPgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxXPindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Elevation Cut, held at Phi = ' num2str(EL_Ang_PHI) '^o: E_{\phi} (XPol) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;



% %Phi = 90 Theta Cut (Elevation Cut#2)---------------------------------------------------------
% 
EL_Ang_PHI=90;

%here's where we "wrap" the Elevation Cut 360 degrees over Theta
%The Goal:  to have ND Elevation-Cut vectors EL_CP_Gplot, etc. w/ elements (-180:FF_dTH:180)
%We need to re-do EL_Ang_vec, etc. AFTER we've "wrapped" the elevation cuts
%of interest
EL_Ang_vec=linspace(0,180,FF_nTH);
[Dummy, EL_Ang_indx]=min(abs(EL_Ang_vec-EL_Ang_PHI));
% 
 EL_CP_Gplot=[CPgainplot(:,EL_Ang_indx,:) ; flipdim( (CPgainplot(2:end, EL_Ang_indx + (FF_cPHI-1), :)),1)];
 EL_XP_Gplot=[XPgainplot(:,EL_Ang_indx,:) ; flipdim( (XPgainplot(2:end, EL_Ang_indx + (FF_cPHI-1), :)),1)];
 EL_Tot_Gplot=[Totgainplot(:,EL_Ang_indx,:) ; flipdim( (Totgainplot(2:end, EL_Ang_indx + (FF_cPHI-1), :)),1)];
 
 EL_CP_Gplot=fftshift(EL_CP_Gplot,1);
 EL_XP_Gplot=fftshift(EL_XP_Gplot,1);
 EL_Tot_Gplot=fftshift(EL_Tot_Gplot,1);
% 

EL_Ang_vec=linspace(-180,180,2*FF_nTH-1);
[Dummy, EL_Ang_indx]=min(abs(EL_Ang_vec-EL_Ang_PHI));
ELang=(-180:FF_dTH:180);
leg_ang=(ELang); %corrects for graphing under Dirplot function
leg_ang=repmat(leg_ang, [1 1 numbeam1]);

[maxCPgain,maxCPindx]=max(EL_CP_Gplot(:,1,:));
[maxXPgain,maxXPindx]=max(EL_XP_Gplot(:,1,:));
[maxTotgain,maxTotindx]=max(EL_Tot_Gplot(:,1,:));


%plot stuff for Phi=90 Theta Cut (Elevation Cut#1)
%Power Sum Plot
figure(7);
orient landscape;

for i=1:numbeam1
    Dirplot(ELang.',EL_Tot_Gplot(:,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end

for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxTotgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxTotindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Elevation Cut, held at Phi = ' num2str(EL_Ang_PHI) '^o: E_{TOTAL} (Power \Sigma) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;

%CoPol Plot
figure(8);
orient landscape;

for i=1:numbeam1
    Dirplot(ELang.',EL_CP_Gplot(:,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end

for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxCPgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxCPindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Elevation Cut, held at Phi = ' num2str(EL_Ang_PHI) '^o: E_{\theta} (CoPol) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;


% Xpol Plot
figure(9);
orient landscape;

for i=1:numbeam1
    Dirplot(ELang.',EL_XP_Gplot(:,:,i),char(lnstyl(i)),[azcut_rhomax rhoplotmin n_plot_inc]);
hold on;
end

for i=1:numbeam1
     tmptxt=['Beam_', num2str(i), ' = ', num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Max Gain_', num2str(i), ' = ', num2str(maxXPgain(1,1,i)), ...
             ' dBi at ', num2str(leg_ang(maxXPindx(1,1,i))) '^o' ];
     celltxt(i,:)=cellstr(tmptxt);
 end
%
autsernum=strrep(pathnameP1, '\','\\'); % used to print out dir path correctly for AUT ser# in title
autsernum=strrep(autsernum, '_','\_'); % used to print out underscore correctly for AUT ser# in title
%set(gca,'FontSize',8)
%homit1=findobj(gca,'Type','line');
%set(homit1,'HandleVisibility','off');
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
titltxt=strvcat(autsernum,  ['Elevation Cut, held at Phi = ' num2str(EL_Ang_PHI) '^o: E_{\phi} (XPol) Component']);
title(titltxt);
% % set(gcf,'PaperPosition',[-1 .25 10.5 8]);
% % set(gcf,'Units','inches','Position',[0 0 10.5 8]);
% % set(gcf,'PaperPositionMode','auto');
% 
% hold off;

   %logic for adding CDF functionality
   
   edges = [-20:.5:10];
   q=length(edges);
   [tot_r,tot_c,totD]=size(Totgain);
   compshell=ones(tot_r,tot_c,numbeam1);
   for k=1:q
       compND=edges(k)*compshell;
       cumtot(k,1,:)=sum(sum(Totgain>compND));
   end
   cumperc=round(100*(cumtot./(tot_r*tot_c*ones(q,1,numbeam1))))
   
   %plotting CDF
   figure(10);
orient landscape;
for i=1:numbeam1
    plot(edges,cumperc(:,1,i),char(lnstyl(i)),'LineWidth',2.5);
hold on;
end

for i=1:numbeam1
     tmptxt=[ num2str(ceil(freq(i)/(1*10^6))), ...
             ' MHz : Gain_{peak', num2str(i), '} = ', num2str(round(100*maxdBitest(i))/100), ...
             ' dBi,  Eff_{term', num2str(i),'} = ', num2str(round(100*Effcheck(i))/100), '%', ...
             ' at S_{11} = ', num2str(round(100*S11dBmag(i))/100)];
     celltxt(i,:)=cellstr(tmptxt);
 end
[hleg1 hleg2 hleg3 hleg4]=legend(celltxt,4);
 CDFtxt=strvcat( ( autsernum), ('3D Pattern Statistics:  CDF of Terminal Gain (Power Sum)')  ) ;
 title (CDFtxt);
xlabel(' Gain Level (dBi)');
ylabel ('% of Pattern Exceeding Gain Level');
grid on;


%--------------------------------------------------------------------------
   
   
   %on with the 3-D plotting
   
   prmpt=input('** If you want to generate 3D plots, hit Y [enter].  If not, hit [enter] by itself ==> ', 's');

% Variables used for development work

if prmpt== 'Y';
    
   disp('**   Select Beam# to Plot  **'); disp(' ');disp(' ');
   
   for i=1:numbeam1
        disp(['Beam # ' num2str(i) ' = ' num2str(freq(i)./10^6) ' MHz']); disp(' ');
   end
   disp(' ');
   beam2plot=0;
   while  ( (beam2plot <1) | (beam2plot > numbeam1) )
        beam2plot=input(['Please choose a Beam #, from 1 to ' num2str(numbeam1) ' ==> '])
    end
    
   theta_d=[0:3:180]';
   phi_d=[0:3:360]';
   theta_r=pi/180 .* theta_d;
   phi_r=pi/180 .* phi_d;
   
   %freqMHz=str2num(frqstrval)*1e3;  %frequency in MHz
   
   % plot Power Sum
   Tampmin=(min(min(Totgain(:,:,beam2plot))));
   Tampscl=(max(max(Totgain(:,:,beam2plot))));
   Tampplot=Totgain(:,:,beam2plot) - min(min(Totgain(:,:,beam2plot)));
   %Tampcolor=10.^( (Totgain(:,:,beam2plot) - Tampscl)./20);
   Tampcolor=10.^( (Totgain(:,:,beam2plot) )./10);
   Z=(ones(length(phi_r),1) * cos(theta_r)')' .* Tampplot;
   X=(cos(phi_r) * sin(theta_r)')' .* Tampplot;
   Y=(sin(phi_r) * sin(theta_r)')' .* Tampplot;
   
   axmax=1.25*max(max(Tampplot));
   axext=[0, axmax];
   noext=[0,0]
   
   figure(11)
   colormap(jet);
   surf(X,Y,Z,(Tampcolor));
   Htot=gca;
   hold on;
   plot3(axext, noext, noext, 'LineWidth', 2,'Color','k'); % X-axis
   plot3(noext, axext, noext, 'LineWidth', 2,'Color','k'); % Y-axis
   plot3(noext, noext, axext, 'LineWidth', 2,'Color','k'); % Z-axis
   text(1.1*axmax, 0, 0, '+X', 'FontSize',20,'FontWeight', 'bold') %X-axis label
   text( 0, 1.1*axmax, 0, '+Y', 'FontSize',20,'FontWeight', 'bold') %Y-axis label
   text( 0, 0, 1.1*axmax, '+Z', 'FontSize',20,'FontWeight', 'bold') %Z-axis label
   
   
    shading interp;
    title (['Power Sum 3D Pattern for Beam # ' num2str(beam2plot) ' at ' num2str(freq(beam2plot)./10^6) ' MHz']);
%    axis equal;
%    
    axis vis3d;
%    light;
%    lighting phong;
    numticks=8;
    Ytlinmax=10.^(Tampscl/10);
    Ytlinmin=10.^(Tampmin/10);
    dYtlin=(Ytlinmax-Ytlinmin)/numticks;
    Ytlinspc=[Ytlinmin:dYtlin:Ytlinmax];
    Ytlogspc=round(100*(10*log10(Ytlinspc)))/100;
    Yloglbl=num2cell(Ytlogspc);
   colorbar('Ylim',[Ytlinmin, Ytlinmax], 'YTick', Ytlinspc,'YTickLabel',Yloglbl);
   
   %plot  CoPol
   
   CPampscl=(max(max(Totgain(:,:,beam2plot))));
   CPampplot=CPgain(:,:,beam2plot) - Tampmin;
   CPampplot=CPampplot .* (CPampplot > 0);
   %CPampcolor=10.^( (CPgain(:,:,beam2plot) - CPampscl)./20);
   CPampcolor=10.^( (CPgain(:,:,beam2plot) )./10);
   Z=(ones(length(phi_r),1) * cos(theta_r)')' .* CPampplot;
   X=(cos(phi_r) * sin(theta_r)')' .* CPampplot;
   Y=(sin(phi_r) * sin(theta_r)')' .* CPampplot;
   
   
   figure(12)
   colormap(jet);
   surf(X,Y,Z,(CPampcolor));
   caxis([Ytlinmin, Ytlinmax]);
   hold on;
   plot3(axext, noext, noext, 'LineWidth', 2,'Color','k'); % X-axis
   plot3(noext, axext, noext, 'LineWidth', 2,'Color','k'); % Y-axis
   plot3(noext, noext, axext, 'LineWidth', 2,'Color','k'); % Z-axis
   text(1.1*axmax, 0, 0, '+X', 'FontSize',20,'FontWeight', 'bold') %X-axis label
   text( 0, 1.1*axmax, 0, '+Y', 'FontSize',20,'FontWeight', 'bold') %Y-axis label
   text( 0, 0, 1.1*axmax, '+Z', 'FontSize',20,'FontWeight', 'bold') %Z-axis label
   
   shading interp;
   title (['CoPol 3D Pattern for Beam # ' num2str(beam2plot) ' at ' num2str(freq(beam2plot)./10^6) ' MHz']);
%    axis equal;
%   
    axis vis3d;
%    light;
%    lighting phong;
  colorbar('Ylim',[Ytlinmin, Ytlinmax], 'YTick', Ytlinspc,'YTickLabel',Yloglbl);
    
   %now plot Xpol
   
   XPampscl=(max(max(Totgain(:,:,beam2plot))));
   XPampplot=XPgain(:,:,beam2plot) - Tampmin;
   XPampplot=XPampplot .* (XPampplot > 0);
   %XPampcolor=10.^( (XPgain(:,:,beam2plot) - XPampscl)./20);
   XPampcolor=10.^( (XPgain(:,:,beam2plot) )./10);
   Z=(ones(length(phi_r),1) * cos(theta_r)')' .* XPampplot;
   X=(cos(phi_r) * sin(theta_r)')' .* XPampplot;
   Y=(sin(phi_r) * sin(theta_r)')' .* XPampplot;
   
   figure(13)
   colormap(jet);
   surf(X,Y,Z,(XPampcolor));
   caxis([Ytlinmin, Ytlinmax]);
   hold on;
   plot3(axext, noext, noext, 'LineWidth', 2,'Color','k'); % X-axis
   plot3(noext, axext, noext, 'LineWidth', 2,'Color','k'); % Y-axis
   plot3(noext, noext, axext, 'LineWidth', 2,'Color','k'); % Z-axis
   text(1.1*axmax, 0, 0, '+X', 'FontSize',20,'FontWeight', 'bold') %X-axis label
   text( 0, 1.1*axmax, 0, '+Y', 'FontSize',20,'FontWeight', 'bold') %Y-axis label
   text( 0, 0, 1.1*axmax, '+Z', 'FontSize',20,'FontWeight', 'bold') %Z-axis label
   
   shading interp;
    title (['XPol 3D Pattern for Beam # ' num2str(beam2plot) ' at ' num2str(freq(beam2plot)./10^6) ' MHz']);
%    axis equal;
%    
 axis vis3d;
%    light;
%    lighting phong;
   colorbar('Ylim',[Ytlinmin, Ytlinmax], 'YTick', Ytlinspc,'YTickLabel',Yloglbl);
   
   

end