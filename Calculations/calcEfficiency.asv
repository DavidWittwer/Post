function [ eff ] = calcEfficiency( freq, gain, vertGain, horzGain, S11 )
%CALCEFFICIENCY Summary of this function goes here
%   Detailed explanation goes here

%% Process optional passed arguements
vertGainPassed = false;
if( exist('vertGain', 'var') )
    vertGainPassed = true;
end

horzGainPassed = false;
if( exist('horzGain', 'var') )
    horzGainPassed = true;
end

s11 = zeros(size(freq,1),1);
s11DataPassed = false;
if( exist('S11', 'var') )
    s11 = S11;
    s11DataPassed = true;
end
%disp(sprintf('Efficiency:  S11 file used = %i',s11DataPassed));

%% Do some error checking
% - Check that the S11 and gain data have the same number of frequency
% points
S11_nFreq = size(freq,1);
Data_nFreq = size(gain,3);
if( s11DataPassed && (S11_nFreq ~=  Data_nFreq) )
    disp(sprintf('ERROR using calcEfficiency:'));
    disp(sprintf('--> Gain and S11 data must have the same number of frequency points'));
    return;
end

% - Check the the S11 and gain data have the frequency values
% A = freq(:,1)
% B = gain(1,1,1:Data_nFreq)
% S11_freq = freq(:,1)
% Data_freq = gain(1,1,1:Data_nFreq)
% if( S11_freq ~= Data_freq )
%     disp(sprintf('ERROR using calcEfficiency:'));
%     disp(sprintf('--> Gain and S11 frequency values must be the same'));
%     return;
% end


%% Compute the efficiency
%- Determine the number of frequeny points
nfreq = size(freq,1);

%- Pre allocate the efficiency result and copy the frequency labels
eff = zeros(nfreq,2);
eff(:,1) = freq;

directivity = zeros(nfreq,2);
directivity(:,1) = freq;

if( vertGainPassed && horzGainPassed )
    vertEff = zeros(nfreq,2);
    vertEff(:,1) = freq;
    horzEff = vertEff;
end




% - For each frequency point
for k = 1 : nfreq
    g = gain(:,:,k);
    [eff(k,2), directivity(k,2)] = eff( g );
    if( vertGainPassed && horzGainPassed )
        g = vertGain(:,:,k);
        vertEff(k,2) = eff( g );
        g = horzGain(:,:,k);
        horzEff(k,2) = eff( g );
    end
end


%% Create a directory to store the efficiency in (if it doesn't already
%- exist)

directory = dir('Calculated*');
if( 0 == size(directory,1) )
    mkdir('Calculated')
end

cd('Calculated');

fid = fopen('Efficiency.csv','wt');
if(s11DataPassed)
    rho_s11 = 1 - 10.^(s11(:,2)./10);
    gmax = -100*ones(nfreq,1);
    if( vertGainPassed && horzGainPassed )
        fprintf(fid,'Freq / MHz, S11 (dB), Gain (dBi), Directivity (dB), Ant Eff, Match Efficiency, Tot Eff, Vert Eff, Horz Eff\n'); 
        for j = 1 : nfreq
            gmax(j) = max(max(gain(:,:,j)));
            fprintf(fid,'%6.1f, %5.2f, %5.2f, %5.2f, %5.2f%%, %4.2f, %5.2f%%, %5.2f%%, %5.2f%%\n', ...
                eff(j,1), ...
                s11(j,2), ...
                gmax(j), ...
                directivity(j,2), ...
                100*eff(j,2), ...
                rho_s11(j), ...
                100*rho_s11(j)*eff(j,2), ...
                100*vertEff(j,2), ...
                100*horzEff(j,2) ...
                );
        end
    else
        fprintf(fid,'Freq / MHz, S11 (dB), Gain (dBi), Directivity (dB), Ant Eff, Match Efficiency, Tot Eff\n'); 
        for j = 1 : nfreq
            gmax(j) = max(max(gain(:,:,j)));
            fprintf(fid,'%6.1f, %5.2f, %5.2f, %5.2f, %5.2f%%, %4.2f, %5.2f%%\n', ...
                eff(j,1), ...
                s11(j,2), ...
                gmax(j), ...
                directivity(j,2), ...
                100*eff(j,2), ...
                rho_s11(j), ...
                100*rho_s11(j)*eff(j,2) ...
                );
        end
    end
    fprintf(fid,'\n');
    %-- Compute the maximum values
    fprintf(fid,'MAX, , %5.2f, %5.2f, %5.2f%%, %4.2f, %5.2f%%\n', ...
        max( gmax ), ...
        max( directivity(:,2) ), ...
        max( 100*eff(:,2) ), ...
        max( 100*rho_s11 ), ...
        max( 100*(rho_s11.*eff(:,2)) ) );
    %-- Compute the minimum values
    fprintf(fid,'MIN, , %5.2f, %5.2f, %5.2f%%, %4.2f, %5.2f%%\n', ...
        min( gmax ), ...
        min( directivity(:,2) ), ...
        min( 100*eff(:,2) ), ...
        min( 100*rho_s11 ), ...
        min( 100*(rho_s11.*eff(:,2)) ) );
    %-- Compute the mean values
    fprintf(fid,'MEAN, , %5.2f, %5.2f, %5.2f%%, %4.2f, %5.2f%%\n', ...
        mean( gmax ), ...
        mean( directivity(:,2) ), ...
        mean( 100*eff(:,2) ), ...
        mean( 100*rho_s11 ), ...
        mean( 100*(rho_s11.*eff(:,2)) ) );
else
    gmax = -100*ones(nfreq,1);
    if( vertGainPassed && horzGainPassed )
        fprintf(fid,'Freq / MHz, S11 (dB), Gain (dBi), Directivity (dB), Ant Eff, Match Efficiency, Tot Eff, Vert Eff, Horz Eff\n'); 
        for j = 1 : nfreq
            gmax(j) = max(max(gain(:,:,j)));
            fprintf(fid,'%6.1f, %5.2f, %5.2f, %5.2f, %5.2f%%, %4.2f, %5.2f%%, %5.2f%%, %5.2f%%\n', ...
                eff(j,1), ...
                0, ...
                gmax(j), ...
                directivity(j,2), ...
                100*eff(j,2), ...
                1.0, ...
                100*eff(j,2), ...
                100*vertEff(j,2), ...
                100*horzEff(j,2) ...
                );
        end
    else
        fprintf(fid,'Freq / MHz, S11 (dB), Gain (dBi), Directivity (dB), Ant Eff, Match Efficiency, Tot Eff\n'); 
        for j = 1 : nfreq
            gmax(j) = max(max(gain(:,:,j)));
            fprintf(fid,'%6.1f, %5.2f, %5.2f, %5.2f, %5.2f%%, %4.2f, %5.2f%%\n', ...
                eff(j,1), ...
                0, ...
                gmax(j), ...
                directivity(j,2), ...
                100*eff(j,2), ...
                1.0, ...
                100*eff(j,2) ...
                );
        end
    end
    fprintf(fid,'\n');
    %-- Compute the maximum values
    fprintf(fid,'MAX, , %5.2f, %5.2f, %5.2f%%, , %5.2f%%\n', ...
        max( gmax ), ...
        max( directivity(:,2) ), ...
        max( 100*eff(:,2) ), ...
        max( 100*eff(:,2) ) );
    %-- Compute the minimum values
    fprintf(fid,'MIN, , %5.2f, %5.2f, %5.2f%%, , %5.2f%%\n', ...
        min( gmax ), ...
        min( directivity(:,2) ), ...
        min( 100*eff(:,2) ), ...
        min( 100*eff(:,2) ) );
    %-- Compute the mean values
    fprintf(fid,'MEAN, , %5.2f, %5.2f, %5.2f%%, , %5.2f%%\n', ...
        mean( gmax ), ...
        mean( directivity(:,2) ), ...
        mean( 100*eff(:,2) ), ...
        mean( 100*eff(:,2) ) );
end
fclose(fid);

cd('..');
